#include <stdio.h> #include <stdlib.h>

typedef struct { int start;
int end; int sum;
} SubarrayResult;


SubarrayResult maxSubarray(SubarrayResult a, SubarrayResult b) { if (a.sum > b.sum) return a;
if (b.sum > a.sum) return b;
// If sums are equal, return the earlier one return (a.start <= b.start) ? a : b;
}



SubarrayResult maxSubarrayUnderConstraint(int* arr, int n, int constraint) {
 
int left = 0, right = 0; int current_sum = 0;
SubarrayResult best = {-1, -1, 0}; // No valid subarray yet


while (right < n) { current_sum += arr[right];

while (current_sum > constraint && left <= right) { current_sum -= arr[left];
left++;
}


if (current_sum <= constraint) {
if (right - left + 1 > 0 && current_sum >= best.sum) { best.start = left;
best.end = right; best.sum = current_sum;
}
}


right++;
}
 
return best;
}


void printResult(int* arr, SubarrayResult res) { if (res.start == -1) {
printf("No feasible subarray found.\n"); return;
}


printf("Best subarray (sum = %d): [", res.sum); for (int i = res.start; i <= res.end; i++) {
printf("%d", arr[i]);
if (i < res.end) printf(", ");
}
printf("]\n");
}
 
int main() {


int resources1[] = {2, 1, 3, 4}; int constraint1 = 5;

int resources2[] = {2, 2, 2, 2}; int constraint2 = 4;

int resources3[] = {1, 5, 2, 3}; int constraint3 = 5;

int resources4[] = {6, 7, 8}; int constraint4 = 5;

int resources5[] = {1, 2, 3, 2, 1}; int constraint5 = 5;

int resources6[] = {1, 1, 1, 1, 1}; int constraint6 = 4;

int resources7[] = {4, 2, 3, 1}; int constraint7 = 5;
 
int resources8[] = {}; int constraint8 = 10;

int resources9[] = {1, 2, 3}; int constraint9 = 0;

int N = 100000;
int* resources10 = malloc(sizeof(int) * N);
for (int i = 0; i < N; i++) resources10[i] = (i % 10) + 1; int constraint10 = 1000000000;

printf("Test Case 1:\n");
printResult(resources1, maxSubarrayUnderConstraint(resources1, 4, constraint1));


printf("\nTest Case 2:\n");
printResult(resources2, maxSubarrayUnderConstraint(resources2, 4, constraint2));


printf("\nTest Case 3:\n");
printResult(resources3, maxSubarrayUnderConstraint(resources3, 4, constraint3));


printf("\nTest Case 4:\n");
 
printResult(resources4, maxSubarrayUnderConstraint(resources4, 3, constraint4));


printf("\nTest Case 5:\n");
printResult(resources5, maxSubarrayUnderConstraint(resources5, 5, constraint5));


printf("\nTest Case 6:\n");
printResult(resources6, maxSubarrayUnderConstraint(resources6, 5, constraint6));


printf("\nTest Case 7:\n");
printResult(resources7, maxSubarrayUnderConstraint(resources7, 4, constraint7));


printf("\nTest Case 8:\n");
printResult(resources8, maxSubarrayUnderConstraint(resources8, 0, constraint8));


printf("\nTest Case 9:\n");
printResult(resources9, maxSubarrayUnderConstraint(resources9, 3, constraint9));


printf("\nTest Case 10 (Stress Test):\n");
 
printResult(resources10, maxSubarrayUnderConstraint(resources10, N, constraint10));


free(resources10); return 0;
}
