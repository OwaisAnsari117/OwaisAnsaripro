#include <stdio.h>
#include <stdbool.h>

#define V 5  // Number of vertices

// Function to print the color assigned to each vertex
void printSolution(int color[]) {
    printf("\nColor assigned to vertices:\n");
    for (int i = 0; i < V; i++)
        printf("Vertex %d ---> Color %d\n", i + 1, color[i]);
}

// Check if assigning color c to vertex v is safe
bool isSafe(int v, bool graph[V][V], int color[], int c) {
    for (int i = 0; i < V; i++)
        if (graph[v][i] && c == color[i])
            return false;
    return true;
}

// Backtracking function
bool graphColoringUtil(bool graph[V][V], int m, int color[], int v) {
    if (v == V)
        return true; // All vertices are colored

    for (int c = 1; c <= m; c++) {
        if (isSafe(v, graph, color, c)) {
            color[v] = c;

            if (graphColoringUtil(graph, m, color, v + 1))
                return true;

            // Backtrack
            color[v] = 0;
        }
    }
    return false;
}

// Wrapper function to solve the m-coloring problem
void graphColoring(bool graph[V][V], int m) {
    int color[V] = {0};

    if (!graphColoringUtil(graph, m, color, 0)) {
        printf("\nSolution does not exist with %d colors.\n", m);
        return;
    }

    printSolution(color);
}

// Main driver function
int main() {
    int choice;
    int m;

    // Adjacency Matrix for Graph 1 (from first image)
    bool graph1[V][V] = {
        {0, 1, 1, 1, 0},
        {1, 0, 1, 0, 0},
        {1, 1, 0, 1, 0},
        {1, 0, 1, 0, 1},
        {0, 0, 0, 1, 0}
    };

    // Adjacency Matrix for Graph 2 (Complete Graph K5)
    bool graph2[V][V] = {
        {0, 1, 1, 1, 1},
        {1, 0, 1, 1, 1},
        {1, 1, 0, 1, 1},
        {1, 1, 1, 0, 1},
        {1, 1, 1, 1, 0}
    };

    printf("===== Graph Coloring using Backtracking =====\n");
    printf("1. Graph 1 (Partial Graph - GSM network example)\n");
    printf("2. Graph 2 (Complete Graph)\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);

    printf("Enter the number of available colors (frequencies): ");
    scanf("%d", &m);

    switch (choice) {
        case 1:
            printf("\n--- Coloring Graph 1 ---\n");
            graphColoring(graph1, m);
            break;

        case 2:
            printf("\n--- Coloring Graph 2 ---\n");
            graphColoring(graph2, m);
            break;

        default:
            printf("Invalid choice!\n");
            break;
    }

    return 0;
}
